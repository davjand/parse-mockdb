!function(root){function registerStub(stub){return registeredStubs.push(stub),stub}function clearStubs(){registeredStubs.forEach(function(stub){stub.restore()})}function queryToJSON(query){return _.extend(query.toJSON(),{className:query.className})}function addDefaultFields(data){return _.extend(data,{id:lastObjectId++,createdAt:new Date,updatedAt:new Date})}var Parse=root.Parse,sinon=root.sinon,lastObjectId=1,registeredStubs=[],stubMethods={stubRequest:[Parse,"_request"],stubCollectionFetch:[Parse.Collection.prototype,"fetch"],stubConfigGet:[Parse.Config,"get"],stubQueryFind:[Parse.Query.prototype,"find"],stubQueryFirst:[Parse.Query.prototype,"first"],stubQueryGet:[Parse.Query.prototype,"get"],stubQueryCount:[Parse.Query.prototype,"count"],stubObjectSave:[Parse.Object.prototype,"save"],stubObjectFetch:[Parse.Object.prototype,"fetch"],stubObjectDestroy:[Parse.Object.prototype,"destroy"]};for(var key in stubMethods){var object=stubMethods[key][0],methodName=stubMethods[key][1];!function(object,methodName){stubMethods[key]=function(cb){return registerStub(sinon.stub(object,methodName,function(options){var promise=(new Parse.Promise)._thenRunCallbacks(options),data=cb.call(this,queryToJSON(this));return data&&(data=addDefaultFields(data)),promise.resolve(data),console.log("stub resolved"),promise}))}}(object,methodName)}Parse.Mock=_.extend(stubMethods,{clearStubs:clearStubs})}(this);